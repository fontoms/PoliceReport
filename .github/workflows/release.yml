name: Versioning des releases

on:
  push:
    branches:
      - main
      - dev

jobs:
  release:
    if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      version_tag: ${{ steps.get-version.outputs.version_tag }}

    steps:
      - name: Extraire le code
        uses: actions/checkout@v3

      - name: Installer .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "7.x"

      - name: Obtenir la version à partir du message de commit
        id: get-version
        run: |
          commit_msg=$(git log -1 --pretty=%B)
          version=$(echo $commit_msg | sed 's/Release //')
          version_tag=$version
          version=$(echo $version | grep -oP '^\d+\.\d+\.\d+')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "version_tag=$version_tag" >> $GITHUB_OUTPUT
        shell: bash

      - name: Afficher la version
        run: |
          echo "Version: ${{ steps.get-version.outputs.version }}"
          echo "Version Tag: ${{ steps.get-version.outputs.version_tag }}"

      - name: Mettre à jour la version dans le fichier .csproj
        run: |
          csproj_file=$(find . -name "*.csproj")
          version="${{ steps.get-version.outputs.version }}"
          sed -i 's#<Version>.*</Version>#<Version>'"$version"'</Version>#' $csproj_file
          sed -i 's#<AssemblyVersion>.*</AssemblyVersion>#<AssemblyVersion>'"$version"'</AssemblyVersion>#' $csproj_file
          sed -i 's#<FileVersion>.*</FileVersion>#<FileVersion>'"$version"'</FileVersion>#' $csproj_file
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git commit -am "Mise à jour de la version vers $version" || echo "Aucun changement à commiter"
          git push || echo "Aucun changement à pousser"

      - name: Compiler et publier pour x64
        run: |
          dotnet publish -c Release \
            --runtime win-x64 \
            --self-contained true \
            -p:PublishReadyToRun=true \
            -p:PublishSingleFile=true \
            -p:EnableCompressionInSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:DebugType=None \
            -p:DebugSymbols=false \
            -o ./output-x64

      - name: Compiler et publier pour x86
        run: |
          dotnet publish -c Release \
            --runtime win-x86 \
            --self-contained true \
            -p:PublishReadyToRun=true \
            -p:PublishSingleFile=true \
            -p:EnableCompressionInSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:DebugType=None \
            -p:DebugSymbols=false \
            -o ./output-x86

      - name: Charger les artefacts de la compilation pour x64
        run: |
          cd ./output-x64
          zip -r ../PoliceReport-${{ steps.get-version.outputs.version_tag }}-x64.zip ./*
          cd ..

      - name: Charger les artefacts de la compilation pour x86
        run: |
          cd ./output-x86
          zip -r ../PoliceReport-${{ steps.get-version.outputs.version_tag }}-x86.zip ./*
          cd ..

      - name: Charger les artefacts compressés
        uses: actions/upload-artifact@v3
        with:
          name: PoliceReport-x64-${{ steps.get-version.outputs.version_tag }}
          path: ./PoliceReport-${{ steps.get-version.outputs.version_tag }}-x64.zip

      - name: Charger les artefacts compressés x86
        uses: actions/upload-artifact@v3
        with:
          name: PoliceReport-x86-${{ steps.get-version.outputs.version_tag }}
          path: ./PoliceReport-${{ steps.get-version.outputs.version_tag }}-x86.zip

  setup:
    needs: release
    runs-on: windows-latest

    steps:
      - name: Extraire le code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Télécharger les artefacts pour x64
        uses: actions/download-artifact@v3
        with:
          name: PoliceReport-x64-${{ needs.release.outputs.version_tag }}
          path: ./artifacts-x64

      - name: Télécharger les artefacts pour x86
        uses: actions/download-artifact@v3
        with:
          name: PoliceReport-x86-${{ needs.release.outputs.version_tag }}
          path: ./artifacts-x86

      - name: Extraire les artefacts
        run: |
          Expand-Archive -Path "./artifacts-x64/PoliceReport-${{ needs.release.outputs.version_tag }}-x64.zip" -DestinationPath ./output-x64
          Expand-Archive -Path "./artifacts-x86/PoliceReport-${{ needs.release.outputs.version_tag }}-x86.zip" -DestinationPath ./output-x86

      - name: Installer Inno Setup
        run: choco install innosetup --yes

      - name: Compiler le setup x64 avec Inno Setup
        run: |
          Set-Content -Path setup-x64.iss -Value @"
          [Setup]
          AppName=PoliceReport
          AppVersion=${{ needs.release.outputs.version }}
          AppVerName=PoliceReport ${{ needs.release.outputs.version_tag }}
          DefaultDirName={pf}\PoliceReport
          DefaultGroupName=PoliceReport
          OutputDir=.
          OutputBaseFilename=PoliceReportSetup-x64-${{ needs.release.outputs.version_tag }}
          Compression=lzma2
          SolidCompression=yes
          ArchitecturesInstallIn64BitMode=x64
          SetupIconFile=icon.ico
          WizardSmallImageFile=icon.bmp
          AppPublisher=Fontom's
          UninstallDisplayIcon={app}\icon.ico

          [CustomMessages]
          CreateDesktopIcon=Créer une icône sur le bureau
          CreateStartMenuIcon=Créer une icône dans le menu Démarrer

          [Tasks]
          Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "Création des raccourcis"; Flags: unchecked
          Name: "startmenuicon"; Description: "{cm:CreateStartMenuIcon}"; GroupDescription: "Création des raccourcis"; Flags: unchecked

          [Files]
          Source: "output-x64\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

          [Icons]
          Name: "{group}\PoliceReport"; Filename: "{app}\PoliceReport.exe"; IconFilename: "{app}\icon.ico"; Tasks: startmenuicon
          Name: "{commondesktop}\PoliceReport"; Filename: "{app}\PoliceReport.exe"; IconFilename: "{app}\icon.ico"; Tasks: desktopicon

          [Run]
          Filename: "{app}\PoliceReport.exe"; Description: "Lancer PoliceReport"; Flags: nowait postinstall skipifsilent
          "@
          &"C:\Program Files (x86)\Inno Setup 6\ISCC.exe" setup-x64.iss

      - name: Compiler le setup x86 avec Inno Setup
        run: |
          Set-Content -Path setup-x86.iss -Value @"
          [Setup]
          AppName=PoliceReport
          AppVersion=${{ needs.release.outputs.version }}
          AppVerName=PoliceReport ${{ needs.release.outputs.version_tag }}
          DefaultDirName={pf}\PoliceReport
          DefaultGroupName=PoliceReport
          OutputDir=.
          OutputBaseFilename=PoliceReportSetup-x86-${{ needs.release.outputs.version_tag }}
          Compression=lzma2
          SolidCompression=yes
          ArchitecturesAllowed=x86
          SetupIconFile=icon.ico
          WizardSmallImageFile=icon.bmp
          AppPublisher=Fontom's
          UninstallDisplayIcon={app}\icon.ico

          [CustomMessages]
          CreateDesktopIcon=Créer une icône sur le bureau
          CreateStartMenuIcon=Créer une icône dans le menu Démarrer

          [Tasks]
          Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "Création des raccourcis"; Flags: unchecked
          Name: "startmenuicon"; Description: "{cm:CreateStartMenuIcon}"; GroupDescription: "Création des raccourcis"; Flags: unchecked

          [Files]
          Source: "output-x86\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

          [Icons]
          Name: "{group}\PoliceReport"; Filename: "{app}\PoliceReport.exe"; IconFilename: "{app}\icon.ico"; Tasks: startmenuicon
          Name: "{commondesktop}\PoliceReport"; Filename: "{app}\PoliceReport.exe"; IconFilename: "{app}\icon.ico"; Tasks: desktopicon

          [Run]
          Filename: "{app}\PoliceReport.exe"; Description: "Lancer PoliceReport"; Flags: nowait postinstall skipifsilent
          "@
          &"C:\Program Files (x86)\Inno Setup 6\ISCC.exe" setup-x86.iss

      - name: Charger les setups
        uses: actions/upload-artifact@v3
        with:
          name: PoliceReportSetup-x64-${{ needs.release.outputs.version_tag }}
          path: PoliceReportSetup-x64-${{ needs.release.outputs.version_tag }}.exe

      - name: Charger les setups x86
        uses: actions/upload-artifact@v3
        with:
          name: PoliceReportSetup-x86-${{ needs.release.outputs.version_tag }}
          path: PoliceReportSetup-x86-${{ needs.release.outputs.version_tag }}.exe

  publish:
    needs: [release, setup]
    runs-on: ubuntu-latest

    steps:
      - name: Télécharger tous les artefacts
        uses: actions/download-artifact@v3

      - name: Créer une release GitHub
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ needs.release.outputs.version_tag }}
          tag_name: ${{ needs.release.outputs.version_tag }}
          files: |
            PoliceReportSetup-x64-${{ needs.release.outputs.version_tag }}/PoliceReportSetup-x64-${{ needs.release.outputs.version_tag }}.exe
            PoliceReportSetup-x86-${{ needs.release.outputs.version_tag }}/PoliceReportSetup-x86-${{ needs.release.outputs.version_tag }}.exe
            PoliceReport-x64-${{ needs.release.outputs.version_tag }}/PoliceReport-${{ needs.release.outputs.version_tag }}-x64.zip
            PoliceReport-x86-${{ needs.release.outputs.version_tag }}/PoliceReport-${{ needs.release.outputs.version_tag }}-x86.zip
          prerelease: ${{ contains(needs.release.outputs.version_tag, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
